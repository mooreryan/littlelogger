% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/logger.R
\name{make_logger}
\alias{make_logger}
\title{Make a new logger.}
\usage{
make_logger(log_level = 3)
}
\arguments{
\item{log_level}{The logging level of this logger.  Valid values
are 1, 2, and 3.  1 prints only UNKNOWN, FATAL, and ERROR
messages.  2 prints UNKNOWN, FATAL, ERROR, WARN, and INFO
messages.  3 prints UNKNOWN, FATAL, ERROR, WARN, INFO, and DEBUG
messages.}
}
\value{
A new Logger with specified log_level and the following functions:
\itemize{
\item abort
\item unknown
\item fatal
\item error
\item warn
\item info
\item debug
}
}
\description{
Make a new logger that logs to stderr with the given
  \code{log_level}.
}
\details{
Logging is to stderr.  You can control which messages get
  printed with the \code{log_level} option.  Lower numbers print
  only high priority messages.  Higher numbers print less important
  messages.

  The return value is a list with logging and abort functions.  The
  logging functions each take the same arguments as
  \code{\link[base]{sprintf}}.  The \code{abort} function takes
  those arguments plus a \code{status} argument that defaults to 1
  and specifies the exit code of your script.
}
\examples{
## The logger prints some useful info.  It's based on Ruby's logger.
logger <- make_logger()
logger$info("I'm \%s and I'm \%d years old.", "Elrond", 3000)
#=> I, [2021-07-01 18:43:33.937682 #52832] INFO -- I'm Elrond and I'm 3000 years old.
#       ^ Date     ^ Time          ^ PID   ^ Level ^ Message

## log_level = 1 only prints the most important messages.
logger <- make_logger(log_level = 1)
logger$unknown("Will print? \%s", "yes")
logger$fatal("Will print? \%s", "yes")
logger$error("Will print? \%s", "yes")
logger$warn("Will print? \%s", "no")
logger$info("Will print? \%s", "no")
logger$debug("Will print? \%s", "no")

## log_level = 2 prints most of the messages
logger <- make_logger(log_level = 2)
logger$unknown("Will print? \%s", "yes")
logger$fatal("Will print? \%s", "yes")
logger$error("Will print? \%s", "yes")
logger$warn("Will print? \%s", "yes")
logger$info("Will print? \%s", "yes")
logger$debug("Will print? \%s", "no")

## log_level = 3 prints all messages
logger <- make_logger(log_level = 3)
logger$unknown("Will print? \%s", "yes")
logger$fatal("Will print? \%s", "yes")
logger$error("Will print? \%s", "yes")
logger$warn("Will print? \%s", "yes")
logger$info("Will print? \%s", "yes")
logger$debug("Will print? \%s", "yes")

## You can abort a script with a nice message like this:
\dontrun{
logger$abort("1 + 1 should be 2.  Got \%d", 3, status = 111)
}

}
